# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
# 每一个 Broker 在集群中的唯一标识。即使 Broker 的 IP 地址发送了变化，broker.id 只要没变
# 则不会影响 consumers 的消息情况
broker.id=0

# Switch to enable topic deletion or not, default value is false
# 是否允许 Topic 被删除。如果是 false，使用管理员工具删除 Topic 的时候，Kafka 并不会
# 处理此操作
#delete.topic.enable=true

# Kafka 服务端是否可以根据请求自动创建 Topic，默认是 true。如果打开此选项，下面两种请求会触发 Topic 自动创建：
# 1. Producer 向某个不存在的 Topic 写入消息
# 2. Consumer 从某个不存在的 Topic 读取消息
# 建议将此选项设置为 false，并在使用 Topic 之前手动创建
# auto.create.topics.enable = false

############################# Socket Server Settings #############################
# 服务端网络相关配置

# Kafka Server 使用的协议。主机名以及端口号的格式如下：
# The address the socket server listens on. It will get the value returned from 
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = security_protocol://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
#listeners=PLAINTEXT://:9092 # 这里是默认配置，使用 PLAINTEXT，端口号是 9092

# Hostname and port the broker will advertise to producers and consumers. If not set, 
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
#advertised.listeners=PLAINTEXT://your.host.name:9092

# The number of threads handling network requests
# 接收请求的线程数
num.network.threads=3

# The number of threads doing disk I/O
# 执行请求的线程数
num.io.threads=8

# 在介绍下吗两个缓冲区设置之前，先来介绍一下相关背景知识：
# 每个 TCP socket 在内核中都有一个发送缓冲区 (SO_SNDBUF) 和一个接收缓冲区(SO_RCVBUF)。
# 接收缓冲区把数据缓存入内核，应用程序一直没有调用 read 进行读取的话，此数据会一直缓存在
# 相应 socket 的接收缓冲区内。再啰嗦一点，不管进程是否读取 socket，对端发来的数据都会
# 经由内核接收并且缓存到 socket 的内核接收缓冲区之中。read 所做的工作，就是把内核缓冲区
# 中的数据复制到应用层用户的 buffer 里面，仅此而已。进程调用 send 发送的数据的时候，一般
# 情况下，将数据复制进入 socket 的内核发送缓冲区之中，然后 send 便会在上层返回。换句话说，
# send 返回之时，数据不一定会发送到对端去，send 仅仅是把应用层 buffer 的数据复制进 socket
# 的内核发送 buffer 中

# The send buffer (SO_SNDBUF) used by the socket server
# TCP 连接的 SO_SNDBUF 缓冲区大小，默认 102400 字节
# 如果是 -1，就使用操作系统的默认值
socket.send.buffer.bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
# TCP 连接的 SO_RCVBUF 缓冲区大小，默认 102400 字节
# 如果是 -1，就使用操作系统的默认值
socket.receive.buffer.bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
# 请求的最大长度
socket.request.max.bytes=104857600


############################# Log Basics #############################
# 下面是存储 log 相关的配置

# A comma seperated list of directories under which to store log files
# 用于存储 log 文件的目录，可以将多个目录通过逗号分隔，形成一个目录列表
log.dirs=/Users/binglau/code/kafka/log

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
# 每个 Topic 默认的 partition 数量，默认值是 1
num.partitions=1

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
# 用来恢复 log 文件以及关闭时将 log 数据刷新到磁盘的线程数量，每个目录对应
# num.recovery.threads.per.data.dir 个线程
num.recovery.threads.per.data.dir=1

############################# Log Flush Policy #############################
# 下面是 log 文件刷盘的相关配置

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
# 每个多少个消息触发一次 flush 操作，将内存中的消息刷新到硬盘上
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
# 每隔多少毫秒触发一次 flush 操作，将内存中的消息刷新到硬盘上
#log.flush.interval.ms=1000

# 上面这两个配置是全局的，可以在 Topic 中重新设置，并覆盖这两个配置

############################# Log Retention Policy #############################
# log 相关的『保存策略』配置

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# 注意： 下面有两种配置，一种是基于时间的策略，另一种是基于日志文件大小的策略，两种策略同时配置的话，
# 只要满足其中一种策略，则触发 log 删除操作。删除操作总是先删除最旧的日志

# The minimum age of a log file to be eligible for deletion
# 消息在 Kafka 中保存的时间，168 小时之前的 log，可以被删除掉
log.retention.hours=168

# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
# segments don't drop below log.retention.bytes.
# 当剩余空间低于 log.retention.bytes 字节，则开始删除 log
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
# segment 日志文件大小的上限值。当超过这个值时，会创建新的 segment 日志文件
# segment 文件相关信息后面介绍
log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
# 每隔 300000ms, logcleaner 线程将会检查一次，看是否符合上述保留策略的消息可以被删除
log.retention.check.interval.ms=300000

############################# Zookeeper #############################
# zookeeper 相关配置

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
# Kafka 依赖的 ZooKeeper 集群地址，可以配置多个 ZooKeeper 地址，使用逗号隔开
zookeeper.connect=localhost:2181

# Timeout in ms for connecting to zookeeper
# ZooKeeper 连接超时时间
zookeeper.connection.timeout.ms=6000


